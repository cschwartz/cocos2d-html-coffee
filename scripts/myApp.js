// Generated by CoffeeScript 1.6.3
(function() {
  this.CircleSprite = cc.Sprite.extend({
    ctor: function() {
      this._super();
      return this._degree = 0;
    },
    draw: function() {
      cc.drawingUtil.setDrawColor4B(255, 255, 255, 255);
      if (this._degree < 0) {
        this._degree = 360;
      }
      return cc.drawingUtil.drawCircle(cc.PointZero(), 30, cc.DEGREES_TO_RADIANS(this._degree), 60, true);
    },
    myUpdate: function(dt) {
      return this._degree -= 6;
    }
  });

  this.Helloworld = cc.Layer.extend({
    init: function() {
      var closeItem, lazyLayer, menu, rotateToA, scaleToA, selfPointer, size;
      selfPointer = this;
      this._super();
      size = cc.Director.getInstance().getWinSize();
      closeItem = cc.MenuItemImage.create("images/CloseNormal.png", "images/CloseSelected.png", function() {
        return history.go(-1);
      }, this);
      closeItem.setAnchorPoint(cc.p(0.5, 0.5));
      menu = cc.Menu.create(closeItem);
      menu.setPosition(cc.PointZero());
      this.addChild(menu, 1);
      closeItem.setPosition(cc.p(size.width - 20, 20));
      this.helloLabel = cc.LabelTTF.create("Hello World", "Arial", 38);
      this.helloLabel.setPosition(cc.p(size.width / 2, 0));
      this.addChild(this.helloLabel, 5);
      lazyLayer = cc.Layer.create();
      this.addChild(lazyLayer);
      this.sprite = cc.Sprite.create("images/HelloWorld.png");
      this.sprite.setPosition(cc.p(size.width / 2, size.height / 2));
      this.sprite.setScale(0.5);
      this.sprite.setRotation(180);
      lazyLayer.addChild(this.sprite, 0);
      rotateToA = cc.RotateTo.create(2, 0);
      scaleToA = cc.ScaleTo.create(2, 1, 1);
      this.sprite.runAction(cc.Sequence.create(rotateToA, scaleToA));
      this.circle = new CircleSprite();
      this.circle.setPosition(cc.p(40, size.height - 60));
      this.addChild(this.circle, 2);
      this.circle.schedule(this.circle.myUpdate, 1 / 60);
      this.helloLabel.runAction(cc.Spawn.create(cc.MoveBy.create(2.5, cc.p(0, size.height - 40)), cc.TintTo.create(2.5, 255, 125, 0)));
      this.setTouchEnabled(true);
      return true;
    },
    menuCloseCallback: function(sender) {
      return cc.Director.getInstance().end();
    },
    onTouchesBegan: function(touches, events) {
      return this.isMouseDown = true;
    },
    onTouchesMoved: function(touches, event) {
      if (this.isMouseDown) {
        if (touches) {
          return this.circle.setPosition(cc.p(touches[0].getLocation().x, touches[0].getLocation().y));
        }
      }
    },
    onTouchesEnded: function(touches, event) {
      return this.isMouseDown = false;
    },
    onTouchesCancelled: function(touches, event) {
      return console.log("onTouchesCancelled");
    }
  });

  this.HelloWorldScene = cc.Scene.extend({
    onEnter: function() {
      var layer;
      this._super();
      layer = new Helloworld();
      layer.init();
      return this.addChild(layer);
    }
  });

}).call(this);
